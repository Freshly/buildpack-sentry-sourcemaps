#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
env_dir=$(cd "$3/" && pwd)

for key in SOURCEMAP_DIR SOURCEMAP_SENTRY_TOKEN SOURCEMAP_SENTRY_PROJECT SOURCEMAP_URL_PREFIX; do
    [[ -f "${env_dir}/${key}" ]] && export "$key=$(cat "${env_dir}/${key}")"
    [[ -z "${!key}" ]] && echo "-----> ${key} is missing or empty: unable to continue." && exit 1
done

# Prepare what we need
JQ="${cache}/sentry-jq"
if [[ ! -f "${JQ}" ]]; then
    echo "-----> Downloading jq 1.5"
    curl -sSfL "https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64" > "${JQ}"
    chmod +x "${JQ}"
fi

API="https://sentry.io/api/0/projects/${SOURCEMAP_SENTRY_PROJECT}"

# Find or create the release
ORG=$(echo $SOURCEMAP_SENTRY_PROJECT | cut -d/ -f1)
PROJECT=$(echo $SOURCEMAP_SENTRY_PROJECT | cut -d/ -f2)
ORG_API="https://sentry.io/api/0/organizations/${ORG}"

echo "-----> Searching for Sentry release referring to ${SOURCE_VERSION} for organization ${ORG}"
RELEASE_NAME=$(curl -sSf "${ORG_API}/releases/" \
  -H "Authorization: Bearer ${SOURCEMAP_SENTRY_TOKEN}" \
  | ruby -e "require 'json';\
      res=STDIN.read; \
      return if res == ''; \
      release_name=JSON.load(res).find do |r|; \
        r['ref'] == '${SOURCE_VERSION}' && \
          r['projects'].any? { |pr| pr['slug'] == '${PROJECT}'}; \
      end; \
  STDOUT.puts release_name['version'] if release_name"
)

if [[ -n $RELEASE_NAME ]]; then
  echo "-----> Found Sentry release ${RELEASE_NAME} for ${ORG}"
  ENCODED_RELEASE_NAME=$(ruby -e "STDOUT.puts URI.encode(ARGV[0])" "${RELEASE_NAME}")
else
  RELEASE_NAME=$SOURCE_VERSION
  ENCODED_RELEASE_NAME=$SOURCE_VERSION
  echo "-----> No Sentry release found for ${SOURCE_VERSION} in ${ORG}"
  echo "-----> Creating Sentry release ${SOURCE_VERSION} for project ${SOURCEMAP_SENTRY_PROJECT}"

  curl -sSf "${API}/releases/" \
    -X POST \
    -H "Authorization: Bearer ${SOURCEMAP_SENTRY_TOKEN}" \
    -H 'Content-Type: application/json' \
    -d "{\"version\": \"${SOURCE_VERSION}\"}" \
    >/dev/null
fi

# Retrieve files
files=$(mktemp)
echo "       Retrieving existing files to $files"
curl -sSf "${API}/releases/${ENCODED_RELEASE_NAME}/files/" \
     -X GET \
     -H "Authorization: Bearer ${SOURCEMAP_SENTRY_TOKEN}" \
     > "$files"

# Upload the sourcemaps
[ -d "${build}/${SOURCEMAP_DIR}" ] || echo "No directory at ${build}/${SOURCEMAP_DIR}. Skipping sourcemap uploading." && exit 0
cd "${build}/${SOURCEMAP_DIR}"
for map in *.js.map; do
    sum=$(sha1sum "${map}" | cut -c -40)
    name="${SOURCEMAP_URL_PREFIX}${map}"
    res=($(${JQ} -r ". | map(select(.name == \"${name}\")) | first | .id + \" \" + (.sha1 // \"\")" "${files}"))

    if [[ "${res[0]}" == "" ]]; then
        echo "       Uploading ${map} to Sentry"
        curl -sSf "${API}/releases/${ENCODED_RELEASE_NAME}/files/" \
             -X POST \
             -H "Authorization: Bearer ${SOURCEMAP_SENTRY_TOKEN}" \
             -F file=@"${map}" \
             -F name="${name}" \
             >/dev/null

    elif [[ "${res[1]}" != "${sum}" ]]; then
        echo "       Updating ${map} on Sentry"
        curl -sSf "${API}/releases/${ENCODED_RELEASE_NAME}/files/${res[0]}/" \
             -X DELETE \
             -H "Authorization: Bearer ${SOURCEMAP_SENTRY_TOKEN}" \
             >/dev/null
        curl -sSf "${API}/releases/${ENCODED_RELEASE_NAME}/files/" \
             -X POST \
             -H "Authorization: Bearer ${SOURCEMAP_SENTRY_TOKEN}" \
             -F file=@"${map}" \
             -F name="${name}" \
             >/dev/null

    else
        echo "       ${map} is up-to-date"
    fi
done

# Set the release version so dyno metadata doesn't ruin everything above
# https://docs.sentry.io/clients/ruby/config/#optional-settings and see 'releases'
echo "-----> Setting Sentry REVISION file to ${RELEASE_NAME}"
BUILD_DIR=$1
echo $RELEASE_NAME > $BUILD_DIR/REVISION

rm "${files}"

echo "       Done!"
